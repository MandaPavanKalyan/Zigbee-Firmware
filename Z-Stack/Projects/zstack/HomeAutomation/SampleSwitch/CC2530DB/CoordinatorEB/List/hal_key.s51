///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.40.1.7397 for 8051              12/Jul/2025  08:48:54
// Copyright 2004-2021 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Components\hal\target\CC2530EB\hal_key.c
//    Command line       =  
//        -f C:\Users\91939\AppData\Local\Temp\EW1778.tmp
//        ("C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Components\hal\target\CC2530EB\hal_key.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D HAL_UART=TRUE
//        -lC "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DXOSC_FREQ=32000000) -f "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  English_USA.1252
//    List file          =  
//        C:\Users\91939\Downloads\Z-Stack
//        1.0\Z-Stack\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\hal_key.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN __INIT_XDATA_Z

        PUBLIC `??HalKeyConfig::?relay`
        FUNCTION `??HalKeyConfig::?relay`,0203H
        PUBLIC `??HalKeyInit::?relay`
        FUNCTION `??HalKeyInit::?relay`,0203H
        PUBLIC `??HalKeyPoll::?relay`
        FUNCTION `??HalKeyPoll::?relay`,0203H
        PUBLIC `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Hal_KeyIntEnable
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P2INP
        PUBWEAK _A_P0
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
HalKeyConfig        SYMBOL "HalKeyConfig"
`??HalKeyConfig::?relay` SYMBOL "?relay", HalKeyConfig
HalKeyInit          SYMBOL "HalKeyInit"
`??HalKeyInit::?relay` SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
`??HalKeyPoll::?relay` SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead

        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN Hal_TaskID
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\91939\Downloads\Z-Stack 1.0\Z-Stack\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Description:    This file contains the interface to the HAL KEY Service.
//    4                   Simplified for a single button on P0.1 for the E18-MS1-PCB.
//    5 **************************************************************************************************/
//    6 
//    7 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    8 #include "hal_defs.h"
//    9 #include "hal_types.h"
//   10 #include "hal_board_cfg.h" // Contains our custom pin configuration
//   11 #include "hal_drivers.h"
//   12 #include "hal_key.h"
//   13 #include "osal.h"
//   14 
//   15 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   16 
//   17 /**************************************************************************************************
//   18  * CONSTANTS
//   19  */
//   20 #define HAL_KEY_DEBOUNCE_VALUE  25 // Debounce time in milliseconds
//   21 
//   22 /**************************************************************************************************
//   23  * TYPEDEFS
//   24  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   25 static halKeyCBack_t pHalKeyProcessFunction;
pHalKeyProcessFunction:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   26 static uint8 HalKeyConfigured;
HalKeyConfigured:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   27 static uint8 halKeySavedKeys = 0; // Stores the previous key state for polling
halKeySavedKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   28 
//   29 /**************************************************************************************************
//   30  * GLOBAL VARIABLES
//   31  */
//   32 // FIX: Added this global variable back to resolve a linker error.
//   33 // The hal_drivers.c file requires this variable to be externally available.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   34 bool Hal_KeyIntEnable;
Hal_KeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   35 
//   36 /**************************************************************************************************
//   37  * @fn      HalKeyInit
//   38  *
//   39  * @brief   Initialize Key Service.
//   40  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   41 void HalKeyInit( void )
HalKeyInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalKeyInit
        CODE
//   42 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   43   // Configure P0.1 as a GPIO input pin
//   44   P0SEL &= ~PUSH1_BV;
        ANL       0xf3,#0xfd
//   45   P0DIR &= ~PUSH1_BV;
        ANL       0xfd,#0xfd
//   46   
//   47   // Enable the internal pull-down resistor on P0.1
//   48   // This is the correct method for the CC2530
//   49   P2INP &= ~BV(6);    // Set Port 0 input mode to pull-up/pull-down
        ANL       0xf7,#0xbf
//   50   P0INP &= ~PUSH1_BV; // Set P0.1 to have its pull resistor enabled (default is pull-down)
        ANL       0x8f,#0xfd
//   51   
//   52   halKeySavedKeys = 0;
        MOV       DPTR,#halKeySavedKeys
        CLR       A
        MOVX      @DPTR,A
//   53   pHalKeyProcessFunction = NULL;
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//   54   HalKeyConfigured = FALSE;
        MOV       DPTR,#HalKeyConfigured
        MOVX      @DPTR,A
//   55   
//   56   // Since this driver is polling-only, ensure the interrupt flag is always false.
//   57   Hal_KeyIntEnable = FALSE;
        MOV       DPTR,#Hal_KeyIntEnable
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P2INP
        REQUIRE P0INP
        ; // Fall through to label ?Subroutine0
//   58 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine1_0
        ; // Fall through to label ??Subroutine1_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine1_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
//   59 
//   60 /**************************************************************************************************
//   61  * @fn      HalKeyConfig
//   62  *
//   63  * @brief   Configure the Key service. Polling is used for this simple driver.
//   64  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   65 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback)
HalKeyConfig:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function HalKeyConfig
        CODE
//   66 {
        FUNCALL HalKeyConfig, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   67   (void)interruptEnable; // This simplified driver uses polling, so interrupts are ignored.
//   68   
//   69   // Register the application's callback function
//   70   pHalKeyProcessFunction = cback;
        MOV       DPTR,#pHalKeyProcessFunction
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//   71 
//   72   // Start the polling timer if it's not already running
//   73   if (HalKeyConfigured == FALSE)
        MOV       DPTR,#HalKeyConfigured
        MOVX      A,@DPTR
        JNZ       ??HalKeyConfig_0
//   74   {
//   75     osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#Hal_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//   76   }
//   77   
//   78   HalKeyConfigured = TRUE;
??HalKeyConfig_0:
        MOV       DPTR,#HalKeyConfigured
        MOV       A,#0x1
        SJMP      ?Subroutine0
//   79 }
          CFI EndBlock cfiBlock3
//   80 
//   81 /**************************************************************************************************
//   82  * @fn      HalKeyRead
//   83  *
//   84  * @brief   Read the current value of the key(s).
//   85  *
//   86  * @return  keys - bit mask of all currently pressed keys
//   87  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   88 uint8 HalKeyRead( void )
HalKeyRead:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalKeyRead
        CODE
//   89 {
        ; Saved register size: 0
        ; Auto size: 0
//   90   uint8 keys = 0;
        MOV       R1,#0x0
//   91 
//   92   // HAL_PUSH_BUTTON1() is defined in hal_board_cfg.h and points to P0.1
//   93   if (HAL_PUSH_BUTTON1())
        MOV       C,0x80.1
        JNC       ??HalKeyRead_0
//   94   {
//   95     // If the button is pressed, report it as HAL_KEY_SW_1.
//   96     // This now matches the key code expected by the application.
//   97     keys |= HAL_KEY_SW_1;
        MOV       R1,#0x1
//   98   }
//   99 
//  100   return keys;
??HalKeyRead_0:
        LJMP      ?BRET
          CFI EndBlock cfiBlock4
        REQUIRE _A_P0
//  101 }
//  102 
//  103 /**************************************************************************************************
//  104  * @fn      HalKeyPoll
//  105  *
//  106  * @brief   Called by the HAL task to poll the keys. This function is called
//  107  * periodically by the OSAL timer.
//  108  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  109 void HalKeyPoll(void)
HalKeyPoll:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function HalKeyPoll
        CODE
//  110 {
        FUNCALL HalKeyPoll, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  111   uint8 currentKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV       A,R1
        MOV       R1,A
//  112 
//  113   // If the key state has changed since the last poll...
//  114   if (currentKeys != halKeySavedKeys)
        MOV       DPTR,#halKeySavedKeys
        MOVX      A,@DPTR
        XRL       A,R1
        JZ        ??HalKeyPoll_0
//  115   {
//  116     halKeySavedKeys = currentKeys; // ...save the new state...
        MOV       A,R1
        MOVX      @DPTR,A
//  117     
//  118     // ...and notify the application by calling its registered callback function.
//  119     if (pHalKeyProcessFunction)
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??HalKeyPoll_0
//  120     {
//  121       (pHalKeyProcessFunction)(currentKeys, HAL_KEY_STATE_NORMAL);
        ; Setup parameters for indirect call
        MOV       R2,#0x0
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  122     }
//  123   }
//  124 }
??HalKeyPoll_0:
        SJMP      ??Subroutine1_0
          CFI EndBlock cfiBlock5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyPoll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyPoll

        END
//  125 
//  126 // All other functions from the original TI file (interrupts, sleep, joystick) are
//  127 // removed as they are not needed for this hardware configuration.
//  128 
//  129 #else // This is for builds where HAL_KEY is FALSE
//  130 
//  131 void HalKeyInit(void) {}
//  132 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback) {}
//  133 uint8 HalKeyRead(void) { return 0; }
//  134 void HalKeyPoll(void) {}
//  135 
//  136 #endif // HAL_KEY
// 
// 138 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//   5 bytes in segment XDATA_Z
// 
//  24 bytes of CODE     memory
//   0 bytes of DATA     memory (+ 5 bytes shared)
// 138 bytes of HUGECODE memory
//   5 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
